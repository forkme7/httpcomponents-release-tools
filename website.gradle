/*
 * ====================================================================
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

import ok2c.httpcomponents.release.pom.Pom
import ok2c.httpcomponents.release.pom.PomModule

/////////////////////////// Helper utilities //////////////////////////////////

void fixLinks(Pom pom, File dstDir) {

    // Deal with crappy links generated by Maven Site Plugin
    project.fileTree(dir: dstDir, include: '*.html').each {
        File f ->
            Html.rewriteLinks(f, { URI href, String localName ->
                if (!href.isAbsolute()) {
                    def m1 = href.path =~ /^..(\/..\/scp:\/people.apache.org\/www)?\/hc.apache.org\//
                    if (m1.find()) {
                        return new URI(m1.replaceFirst('../'))
                    }
                }
                return href
            })
    }

    pom.modules.each { PomModule submodule ->
        project.fileTree(dir: new File(dstDir, submodule.name), include: '*.html').each {
            File f ->
                Html.rewriteLinks(f, { URI href, String localName ->
                    if (!href.isAbsolute()) {
                        def m1 = href.path =~ /^..\/..(\/..\/scp:\/people.apache.org\/www)?\/hc.apache.org\//
                        if (m1.find()) {
                            return new URI(m1.replaceFirst('../../'))
                        }
                        if (href.path == '../images/logos/httpcomponents.png') {
                            return new URI('../../images/logos/httpcomponents.png')
                        }
                    }
                    return href
                })
        }
    }

}

void rewriteSiteCss(Pom pom, File dstDir) {
    File siteCss = new File(dstDir, 'css/site.css')
    if (siteCss.exists()) {
        siteCss.withWriter { Writer w ->
            w  << '@import url("../../css/hc-maven.css");'
        }
    }
    pom.modules.each { PomModule submodule ->
        File moduleDstDir = new File(dstDir, submodule.name)
        File moduleSiteCss = new File(moduleDstDir, 'css/site.css')
        if (moduleSiteCss.exists()) {
            moduleSiteCss.withWriter { Writer w ->
                w  << '@import url("../../../css/hc-maven.css");'
            }
        }
    }

}

/////////////////////////// Copy specs ////////////////////////////////////////

CopySpec siteContent(File dir) {
    copySpec {
        from ("${dir}/target/site") {
            exclude '**/*.html'
        }
        from ("${dir}/target/site") {
            include '**/*.html'
            filter(Line.filter())
        }
    }
}

task copyReleaseWebContent {
    group = 'Website'
    description = "Generate release web content."
    doLast {
        if (!project.'HC_RELEASE_DIR') {
            println "HC release directory is undefined"
            return
        }
        def releaseDir = file(project.'HC_RELEASE_DIR')
        if (!project.'HC_WEB_STAGE_DIR') {
            println "HC website staging directory is undefined"
            return
        }
        def stagingDir = file(project.'HC_WEB_STAGE_DIR')

        def pom = Pom.parsePom(releaseDir)
        def releaseSeries = "${PackageNames.get(pom.artifactId)}-${pom.major}.${pom.minor}.x"
        println "Copying content of ${ProductNames.get(pom.artifactId)} ${pom.version} release to ${stagingDir}/${releaseSeries}"
        copy {
            into "${stagingDir}/${releaseSeries}"
            with siteContent(releaseDir)
        }
        pom.modules.each { PomModule submodule ->
            copy {
                into "${stagingDir}/${releaseSeries}/${submodule.name}"
                with siteContent(file("${releaseDir}/${submodule.name}"))
            }
        }
        fixLinks(pom, stagingDir)
        rewriteSiteCss(pom, stagingDir)
    }
}

task copyProjectWebContent {
    group = 'Website'
    description = "Generate project web content."
    doLast {
        if (!project.'HC_WEBSITE_DIR') {
            println "HC project webiste directory is undefined"
            return
        }
        def rootDir = file(project.'HC_WEBSITE_DIR')
        if (!project.'HC_WEB_STAGE_DIR') {
            println "HC website staging directory is undefined"
            return
        }
        def stagingDir = file(project.'HC_WEB_STAGE_DIR')
        println "Copying project website content to ${stagingDir}"
        copy {
            into "${stagingDir}"
            with siteContent(rootDir)
        }
    }
}